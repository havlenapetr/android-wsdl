package org.jinouts.ws.axis;

import java.net.MalformedURLException;
import java.net.URL;
import org.jinouts.xml.namespace.QName;
import org.jinouts.xml.ws.WebEndpoint;
import org.jinouts.xml.ws.WebServiceClient;
import org.jinouts.xml.ws.WebServiceFeature;
import org.jinouts.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.1
 * 2012-05-29T20:07:16.615+06:00
 * Generated source version: 2.5.1
 * 
 */
@WebServiceClient(name = "ComplexRequestWS", 
                  wsdlLocation = "http://localhost:8080/WebServiceProject/services/ComplexRequestWS?wsdl",
                  targetNamespace = "http://axis.ws.jinouts.org") 
public class ComplexRequestWS extends org.jinouts.ws.JinosService {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://axis.ws.jinouts.org", "ComplexRequestWS");
    public final static QName ComplexRequestWSHttpSoap12Endpoint = new QName("http://axis.ws.jinouts.org", "ComplexRequestWSHttpSoap12Endpoint");
    public final static QName ComplexRequestWSHttpSoap11Endpoint = new QName("http://axis.ws.jinouts.org", "ComplexRequestWSHttpSoap11Endpoint");
    public final static QName ComplexRequestWSHttpEndpoint = new QName("http://axis.ws.jinouts.org", "ComplexRequestWSHttpEndpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/WebServiceProject/services/ComplexRequestWS?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ComplexRequestWS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/WebServiceProject/services/ComplexRequestWS?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ComplexRequestWS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ComplexRequestWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ComplexRequestWS() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns ComplexRequestWSPortType
     */
    @WebEndpoint(name = "ComplexRequestWSHttpSoap12Endpoint")
    public ComplexRequestWSPortType getComplexRequestWSHttpSoap12Endpoint() {
        return super.getPort(ComplexRequestWSHttpSoap12Endpoint, ComplexRequestWSPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ComplexRequestWSPortType
     */
    @WebEndpoint(name = "ComplexRequestWSHttpSoap12Endpoint")
    public ComplexRequestWSPortType getComplexRequestWSHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(ComplexRequestWSHttpSoap12Endpoint, ComplexRequestWSPortType.class, features);
    }
    /**
     *
     * @return
     *     returns ComplexRequestWSPortType
     */
    @WebEndpoint(name = "ComplexRequestWSHttpSoap11Endpoint")
    public ComplexRequestWSPortType getComplexRequestWSHttpSoap11Endpoint() {
        return super.getPort(ComplexRequestWSHttpSoap11Endpoint, ComplexRequestWSPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ComplexRequestWSPortType
     */
    @WebEndpoint(name = "ComplexRequestWSHttpSoap11Endpoint")
    public ComplexRequestWSPortType getComplexRequestWSHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(ComplexRequestWSHttpSoap11Endpoint, ComplexRequestWSPortType.class, features);
    }
    /**
     *
     * @return
     *     returns ComplexRequestWSPortType
     */
    @WebEndpoint(name = "ComplexRequestWSHttpEndpoint")
    public ComplexRequestWSPortType getComplexRequestWSHttpEndpoint() {
        return super.getPort(ComplexRequestWSHttpEndpoint, ComplexRequestWSPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ComplexRequestWSPortType
     */
    @WebEndpoint(name = "ComplexRequestWSHttpEndpoint")
    public ComplexRequestWSPortType getComplexRequestWSHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(ComplexRequestWSHttpEndpoint, ComplexRequestWSPortType.class, features);
    }

}
